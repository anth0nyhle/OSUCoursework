#include "MVN_Sampler.h"

using namespace std;

const double MVN_Sampler::Rinv[] = {8.80681818181620e-05,0.000164772727272671,0.000230681818181713,0.000286363636363472,0.000332386363636134,0.000369318181817883,0.000397727272726905,0.000418181818181384,0.000431249999999505,0.000437499999999450,0.000437499999999402,0.000431818181817548,0.000421022727272065,0.000405681818181140,0.000386363636362952,0.000363636363635684,0.000338068181817518,0.000310227272726635,0.000280681818181218,0.000249999999999445,0.000218749999999498,0.000187499999999556,0.000156818181817798,0.000127272727272409,9.94318181815624e-05,7.38636363634421e-05,5.11363636362263e-05,3.18181818180948e-05,1.64772727272268e-05,5.68181818180212e-06,
0.000164772727272671,0.000395986070381073,0.000595307917888265,0.000764406158357306,0.000904948680351255,0.00101860337243317,0.00110703812316611,0.00117192082111314,0.00121491935483730,0.00123770161290166,0.00124193548386927,0.00122928885630318,0.00120142961876644,0.00116002565982212,0.00110674486803324,0.00104325513196287,0.000971224340174061,0.000892320381229854,0.000808211143693304,0.000720564516127450,0.000631048387095342,0.000541330645160023,0.000453079178884536,0.000367961876831935,0.000287646627565252,0.000213801319647539,0.000148093841641837,9.21920821111885e-05,4.77639296186373e-05,1.64772727272268e-05,
0.000230681818181713,0.000595307917888265,0.000997140762462782,0.00133944281524839,0.00162547653958822,0.00185850439882539,0.00204178885630302,0.00217859237536425,0.00227217741935219,0.00232580645160996,0.00234274193548067,0.00232624633430744,0.00227958211143339,0.00220601173020163,0.00210879765395526,0.00199120234603739,0.00185648826979114,0.00170791788855961,0.00154875366568591,0.00138225806451313,0.00121169354838438,0.00104032258064276,0.000871407624631355,0.000708211143693288,0.000553995601171635,0.000412023460409505,0.000285557184749988,0.000177859237536185,9.21920821111881e-05,3.18181818180946e-05,
0.000286363636363472,0.000764406158357306,0.00133944281524839,0.00191678885630362,0.00240175953078988,0.00279967008797405,0.00311583577712303,0.00335557184750370,0.00352419354838295,0.00362701612902764,0.00366935483870465,0.00365652492668087,0.00359384164222315,0.00348662023459837,0.00334017595307338,0.00315982404691506,0.00295087976539026,0.00271865835776584,0.00246847507330868,0.00220564516128560,0.00193548387096346,0.00166330645160911,0.00139442815248940,0.00113416422287118,0.000887829912021274,0.000660740469206551,0.000458211143693840,0.000285557184749988,0.000148093841641836,5.11363636362260e-05,
0.000332386363636134,0.000904948680351255,0.00162547653958822,0.00240175953078988,0.00314158724339908,0.00375274926685869,0.00424303519061154,0.00462023460410048,0.00489213709676837,0.00506653225805803,0.00515120967741229,0.00515395894427400,0.00508256964808597,0.00494483137829104,0.00474853372433201,0.00450146627565170,0.00421141862169293,0.00388618035189851,0.00353354105571126,0.00316129032257397,0.00277721774192944,0.00238911290322045,0.00200476539588980,0.00163196480938031,0.00127850073313474,0.000952162756595891,0.000660740469206548,0.000412023460409503,0.000213801319647538,7.38636363634414e-05,
0.000369318181817883,0.00101860337243317,0.00185850439882539,0.00279967008797405,0.00375274926685869,0.00462839076245881,0.00533724340175393,0.00588995601172357,0.00629717741934724,0.00656955645160443,0.00671774193547464,0.00675238269793737,0.00668412756597210,0.00652362536655833,0.00628152492667551,0.00596847507330313,0.00559512463342065,0.00517212243400756,0.00471011730204331,0.00421975806450736,0.00371169354837915,0.00319657258063812,0.00268504398826371,0.00218775659823540,0.00171535923753258,0.00127850073313474,0.000887829912021270,0.000553995601171631,0.000287646627565250,9.94318181815613e-05,
0.000397727272726905,0.00110703812316611,0.00204178885630302,0.00311583577712303,0.00424303519061154,0.00533724340175393,0.00631231671553561,0.00708211143694195,0.00766048387095834,0.00806129032257015,0.00829838709676276,0.00838563049852152,0.00833687683283178,0.00816598240467893,0.00788680351904827,0.00751319648092516,0.00705901759529493,0.00653812316714292,0.00596436950145447,0.00535161290321487,0.00471370967740944,0.00406451612902347,0.00341788856304225,0.00278768328445115,0.00218775659823538,0.00163196480938030,0.00113416422287116,0.000708211143693278,0.000367961876831929,0.000127272727272406,
0.000418181818181384,0.00117192082111314,0.00217859237536425,0.00335557184750370,0.00462023460410048,0.00588995601172357,0.00708211143694195,0.00811407624632458,0.00890322580644045,0.00946693548385849,0.00982258064514768,0.00998753665687696,0.00997917888561525,0.00981488269793152,0.00951202346039466,0.00908797653957360,0.00856011730203726,0.00794582111435455,0.00726246334309438,0.00652741935482561,0.00575806451611716,0.00497177419353785,0.00418592375365658,0.00341788856304226,0.00268504398826369,0.00200476539588979,0.00139442815248938,0.000871407624631346,0.000453079178884530,0.000156818181817796,
0.000431249999999505,0.00121491935483730,0.00227217741935219,0.00352419354838295,0.00489213709676837,0.00629717741934724,0.00766048387095834,0.00890322580644045,0.00994657258063233,0.0107116935483727,0.0112197580645005,0.0114919354838542,0.0115493951612727,0.0114133064515948,0.0111048387096590,0.0106451612903043,0.0100554435483691,0.00935685483869236,0.00857056451611266,0.00771774193546869,0.00681955645159912,0.00589717741934261,0.00497177419353781,0.00406451612902344,0.00319657258063807,0.00238911290322042,0.00166330645160908,0.00104032258064274,0.000541330645160011,0.000187499999999551,
0.000437499999999450,0.00123770161290166,0.00232580645160996,0.00362701612902764,0.00506653225805803,0.00656955645160443,0.00806129032257015,0.00946693548385849,0.0107116935483727,0.0117207661290162,0.0124193548386921,0.0128326612903038,0.0129858870967545,0.0129042338709474,0.0126129032257858,0.0121370967741729,0.0115020161290120,0.0107328629032063,0.00985483870965895,0.00889314516127319,0.00787298387095218,0.00681955645159908,0.00575806451611708,0.00471370967740938,0.00371169354837908,0.00277721774192939,0.00193548387096342,0.00121169354838435,0.000631048387095325,0.000218749999999492,
0.000437499999999402,0.00124193548386927,0.00234274193548067,0.00366935483870465,0.00515120967741229,0.00671774193547464,0.00829838709676276,0.00982258064514768,0.0112197580645005,0.0124193548386921,0.0133508064515937,0.0139435483870762,0.0142270161290106,0.0142306451612680,0.0139838709677192,0.0135161290322354,0.0128568548386874,0.0120354838709463,0.0110814516128829,0.0100241935483682,0.00889314516127315,0.00771774193546861,0.00652741935482551,0.00535161290321478,0.00421975806450726,0.00316129032257390,0.00220564516128554,0.00138225806451309,0.000720564516127428,0.000249999999999437,
0.000431818181817548,0.00122928885630318,0.00232624633430744,0.00365652492668087,0.00515395894427400,0.00675238269793737,0.00838563049852152,0.00998753665687696,0.0114919354838542,0.0128326612903038,0.0139435483870762,0.0147584310850219,0.0152111436949914,0.0153355205278352,0.0151653958944037,0.0147346041055474,0.0140769794721168,0.0132263563049622,0.0122165689149341,0.0110814516128828,0.00985483870965887,0.00857056451611254,0.00726246334309422,0.00596436950145434,0.00471011730204319,0.00353354105571118,0.00246847507330860,0.00154875366568586,0.000808211143693276,0.000280681818181208,
0.000421022727272065,0.00120142961876644,0.00227958211143339,0.00359384164222315,0.00508256964808597,0.00668412756597210,0.00833687683283178,0.00997917888561525,0.0115493951612727,0.0129858870967545,0.0142270161290106,0.0152111436949914,0.0158766312316471,0.0161618401759277,0.0161051319647836,0.0157448680351648,0.0151194098240216,0.0142671187683039,0.0132263563049621,0.0120354838709461,0.0107328629032061,0.00935685483869217,0.00794582111435434,0.00653812316714275,0.00517212243400740,0.00388618035189840,0.00271865835776575,0.00170791788855955,0.000892320381229821,0.000310227272726623,
0.000405681818181140,0.00116002565982212,0.00220601173020163,0.00348662023459837,0.00494483137829104,0.00652362536655833,0.00816598240467893,0.00981488269793152,0.0114133064515948,0.0129042338709474,0.0142306451612680,0.0153355205278352,0.0161618401759277,0.0166525843108242,0.0167507331378032,0.0164992668621433,0.0159411656891232,0.0151194098240214,0.0140769794721166,0.0128568548386872,0.0115020161290118,0.0100554435483689,0.00856011730203698,0.00705901759529469,0.00559512463342044,0.00421141862169278,0.00295087976539014,0.00185648826979106,0.000971224340174018,0.000338068181817502,
0.000386363636362952,0.00110674486803324,0.00210879765395526,0.00334017595307338,0.00474853372433201,0.00628152492667551,0.00788680351904827,0.00951202346039466,0.0111048387096590,0.0126129032257858,0.0139838709677192,0.0151653958944037,0.0161051319647836,0.0167507331378032,0.0170498533724068,0.0169501466275387,0.0164992668621432,0.0157448680351646,0.0147346041055471,0.0135161290322350,0.0121370967741726,0.0106451612903039,0.00908797653957323,0.00751319648092484,0.00596847507330285,0.00450146627565150,0.00315982404691490,0.00199120234603729,0.00104325513196282,0.000363636363635664,
0.000363636363635684,0.00104325513196287,0.00199120234603739,0.00315982404691506,0.00450146627565170,0.00596847507330313,0.00751319648092516,0.00908797653957360,0.0106451612903043,0.0121370967741729,0.0135161290322354,0.0147346041055474,0.0157448680351648,0.0164992668621433,0.0169501466275387,0.0170498533724066,0.0167507331378029,0.0161051319647832,0.0151653958944033,0.0139838709677188,0.0126129032257853,0.0111048387096586,0.00951202346039421,0.00788680351904789,0.00628152492667518,0.00474853372433177,0.00334017595307320,0.00210879765395514,0.00110674486803318,0.000386363636362929,
0.000338068181817518,0.000971224340174061,0.00185648826979114,0.00295087976539026,0.00421141862169293,0.00559512463342065,0.00705901759529493,0.00856011730203726,0.0100554435483691,0.0115020161290120,0.0128568548386874,0.0140769794721168,0.0151194098240216,0.0159411656891232,0.0164992668621432,0.0167507331378029,0.0166525843108238,0.0161618401759273,0.0153355205278347,0.0142306451612674,0.0129042338709468,0.0114133064515942,0.00981488269793100,0.00816598240467849,0.00652362536655796,0.00494483137829077,0.00348662023459816,0.00220601173020149,0.00116002565982205,0.000405681818181114,
0.000310227272726635,0.000892320381229854,0.00170791788855961,0.00271865835776584,0.00388618035189851,0.00517212243400756,0.00653812316714292,0.00794582111435455,0.00935685483869236,0.0107328629032063,0.0120354838709463,0.0132263563049622,0.0142671187683039,0.0151194098240214,0.0157448680351646,0.0161051319647832,0.0161618401759273,0.0158766312316465,0.0152111436949908,0.0142270161290100,0.0129858870967538,0.0115493951612721,0.00997917888561471,0.00833687683283133,0.00668412756597172,0.00508256964808569,0.00359384164222294,0.00227958211143325,0.00120142961876637,0.000421022727272039,
0.000280681818181218,0.000808211143693304,0.00154875366568591,0.00246847507330868,0.00353354105571126,0.00471011730204331,0.00596436950145447,0.00726246334309438,0.00857056451611266,0.00985483870965895,0.0110814516128829,0.0122165689149341,0.0132263563049621,0.0140769794721166,0.0147346041055471,0.0151653958944033,0.0153355205278347,0.0152111436949908,0.0147584310850212,0.0139435483870755,0.0128326612903031,0.0114919354838536,0.00998753665687640,0.00838563049852105,0.00675238269793698,0.00515395894427371,0.00365652492668065,0.00232624633430730,0.00122928885630311,0.000431818181817521,
0.000249999999999445,0.000720564516127450,0.00138225806451313,0.00220564516128560,0.00316129032257397,0.00421975806450736,0.00535161290321487,0.00652741935482561,0.00771774193546869,0.00889314516127319,0.0100241935483682,0.0110814516128828,0.0120354838709461,0.0128568548386872,0.0135161290322350,0.0139838709677188,0.0142306451612674,0.0142270161290100,0.0139435483870755,0.0133508064515930,0.0124193548386915,0.0112197580644999,0.00982258064514713,0.00829838709676229,0.00671774193547426,0.00515120967741201,0.00366935483870445,0.00234274193548053,0.00124193548386920,0.000437499999999377,
0.000218749999999498,0.000631048387095342,0.00121169354838438,0.00193548387096346,0.00277721774192944,0.00371169354837915,0.00471370967740944,0.00575806451611716,0.00681955645159912,0.00787298387095218,0.00889314516127315,0.00985483870965887,0.0107328629032061,0.0115020161290118,0.0121370967741726,0.0126129032257853,0.0129042338709468,0.0129858870967538,0.0128326612903031,0.0124193548386915,0.0117207661290156,0.0107116935483722,0.00946693548385797,0.00806129032256971,0.00656955645160406,0.00506653225805775,0.00362701612902744,0.00232580645160983,0.00123770161290160,0.000437499999999426,
0.000187499999999556,0.000541330645160023,0.00104032258064276,0.00166330645160911,0.00238911290322045,0.00319657258063812,0.00406451612902347,0.00497177419353785,0.00589717741934261,0.00681955645159908,0.00771774193546861,0.00857056451611254,0.00935685483869217,0.0100554435483689,0.0106451612903039,0.0111048387096586,0.0114133064515942,0.0115493951612721,0.0114919354838536,0.0112197580644999,0.0107116935483722,0.00994657258063179,0.00890322580643996,0.00766048387095793,0.00629717741934691,0.00489213709676812,0.00352419354838277,0.00227217741935207,0.00121491935483724,0.000431249999999483,
0.000156818181817798,0.000453079178884536,0.000871407624631355,0.00139442815248940,0.00200476539588980,0.00268504398826371,0.00341788856304225,0.00418592375365658,0.00497177419353781,0.00575806451611708,0.00652741935482551,0.00726246334309422,0.00794582111435434,0.00856011730203698,0.00908797653957323,0.00951202346039421,0.00981488269793100,0.00997917888561471,0.00998753665687640,0.00982258064514713,0.00946693548385797,0.00890322580643996,0.00811407624632416,0.00708211143694159,0.00588995601172328,0.00462023460410026,0.00335557184750354,0.00217859237536415,0.00117192082111309,0.000418181818181365,
0.000127272727272409,0.000367961876831935,0.000708211143693288,0.00113416422287118,0.00163196480938031,0.00218775659823540,0.00278768328445115,0.00341788856304226,0.00406451612902344,0.00471370967740938,0.00535161290321478,0.00596436950145434,0.00653812316714275,0.00705901759529469,0.00751319648092484,0.00788680351904789,0.00816598240467849,0.00833687683283133,0.00838563049852105,0.00829838709676229,0.00806129032256971,0.00766048387095793,0.00708211143694159,0.00631231671553530,0.00533724340175368,0.00424303519061135,0.00311583577712290,0.00204178885630294,0.00110703812316607,0.000397727272726889,
9.94318181815624e-05,0.000287646627565252,0.000553995601171635,0.000887829912021274,0.00127850073313474,0.00171535923753258,0.00218775659823538,0.00268504398826369,0.00319657258063807,0.00371169354837908,0.00421975806450726,0.00471011730204319,0.00517212243400740,0.00559512463342044,0.00596847507330285,0.00628152492667518,0.00652362536655796,0.00668412756597172,0.00675238269793698,0.00671774193547426,0.00656955645160406,0.00629717741934691,0.00588995601172328,0.00533724340175368,0.00462839076245860,0.00375274926685853,0.00279967008797394,0.00185850439882531,0.00101860337243313,0.000369318181817870,
7.38636363634421e-05,0.000213801319647539,0.000412023460409505,0.000660740469206551,0.000952162756595891,0.00127850073313474,0.00163196480938030,0.00200476539588979,0.00238911290322042,0.00277721774192939,0.00316129032257390,0.00353354105571118,0.00388618035189840,0.00421141862169278,0.00450146627565150,0.00474853372433177,0.00494483137829077,0.00508256964808569,0.00515395894427371,0.00515120967741201,0.00506653225805775,0.00489213709676812,0.00462023460410026,0.00424303519061135,0.00375274926685853,0.00314158724339896,0.00240175953078979,0.00162547653958816,0.000904948680351225,0.000332386363636123,
5.11363636362263e-05,0.000148093841641837,0.000285557184749988,0.000458211143693840,0.000660740469206548,0.000887829912021270,0.00113416422287116,0.00139442815248938,0.00166330645160908,0.00193548387096342,0.00220564516128554,0.00246847507330860,0.00271865835776575,0.00295087976539014,0.00315982404691490,0.00334017595307320,0.00348662023459816,0.00359384164222294,0.00365652492668065,0.00366935483870445,0.00362701612902744,0.00352419354838277,0.00335557184750354,0.00311583577712290,0.00279967008797394,0.00240175953078979,0.00191678885630355,0.00133944281524835,0.000764406158357283,0.000286363636363464,
3.18181818180948e-05,9.21920821111885e-05,0.000177859237536185,0.000285557184749988,0.000412023460409503,0.000553995601171631,0.000708211143693278,0.000871407624631346,0.00104032258064274,0.00121169354838435,0.00138225806451309,0.00154875366568586,0.00170791788855955,0.00185648826979106,0.00199120234603729,0.00210879765395514,0.00220601173020149,0.00227958211143325,0.00232624633430730,0.00234274193548053,0.00232580645160983,0.00227217741935207,0.00217859237536415,0.00204178885630294,0.00185850439882531,0.00162547653958816,0.00133944281524835,0.000997140762462755,0.000595307917888250,0.000230681818181707,
1.64772727272268e-05,4.77639296186373e-05,9.21920821111881e-05,0.000148093841641836,0.000213801319647538,0.000287646627565250,0.000367961876831929,0.000453079178884530,0.000541330645160011,0.000631048387095325,0.000720564516127428,0.000808211143693276,0.000892320381229821,0.000971224340174018,0.00104325513196282,0.00110674486803318,0.00116002565982205,0.00120142961876637,0.00122928885630311,0.00124193548386920,0.00123770161290160,0.00121491935483724,0.00117192082111309,0.00110703812316607,0.00101860337243313,0.000904948680351225,0.000764406158357283,0.000595307917888250,0.000395986070381065,0.000164772727272668,
5.68181818180212e-06,1.64772727272268e-05,3.18181818180946e-05,5.11363636362260e-05,7.38636363634414e-05,9.94318181815613e-05,0.000127272727272406,0.000156818181817796,0.000187499999999551,0.000218749999999492,0.000249999999999437,0.000280681818181208,0.000310227272726623,0.000338068181817502,0.000363636363635664,0.000386363636362929,0.000405681818181114,0.000421022727272039,0.000431818181817521,0.000437499999999377,0.000437499999999426,0.000431249999999483,0.000418181818181365,0.000397727272726889,0.000369318181817870,0.000332386363636123,0.000286363636363464,0.000230681818181707,0.000164772727272668,8.80681818181609e-05};


vector<vector<float>> MVN_Sampler::GetRinv()
{
  vector<vector<float>> res;
  vector<float> row(30);
  int c = 0;
  for (int i = 0; i < 30; i++)
  {
     for (int j =0; j < 30; j++)
     {
        row[j] = Rinv[c++];
     }
     res.push_back(row);
  }
  return res;
}

vector<vector<float>> MVN_Sampler::Sample(int K, int* seed, float noise_scaling)
{
   int m = 30;//size of covariance matrix
   double mu[30];
   for (int i = 0; i < 30; i++)
      mu[i] = 0;

   double* a = new double[m*m];
   for (int i = 0; i < m*m; i++)
      a[i] = Rinv[i];

   double* x = multinormal_sample(m, K, a, mu, seed);
   vector<vector<float>> res;
   vector<float> row(m);
   int c = 0;
   for (int i = 0; i < K; i++)
   {
      for (int j = 0; j < m; j++)
      {
         row[j] = x[c++]*noise_scaling;
      }
      res.push_back(row);
   }
   delete [] x;
   delete [] a;

   return res;
}

//****************************************************************************80

int MVN_Sampler::i4_max ( int i1, int i2 )

//****************************************************************************80
//
//  Purpose:
//
//    I4_MAX returns the maximum of two I4's.
//
//  Licensing:
//
//    This code is distributed under the GNU LGPL license. 
//
//  Modified:
//
//    13 October 1998
//
//  Author:
//
//    John Burkardt
//
//  Parameters:
//
//    Input, int I1, I2, are two integers to be compared.
//
//    Output, int I4_MAX, the larger of I1 and I2.
//
{
  int value;

  if ( i2 < i1 )
  {
    value = i1;
  }
  else
  {
    value = i2;
  }
  return value;
}
//****************************************************************************80

int MVN_Sampler::i4_min ( int i1, int i2 )

//****************************************************************************80
//
//  Purpose:
//
//    I4_MIN returns the minimum of two I4's.
//
//  Licensing:
//
//    This code is distributed under the GNU LGPL license. 
//
//  Modified:
//
//    13 October 1998
//
//  Author:
//
//    John Burkardt
//
//  Parameters:
//
//    Input, int I1, I2, two integers to be compared.
//
//    Output, int I4_MIN, the smaller of I1 and I2.
//
{
  int value;

  if ( i1 < i2 )
  {
    value = i1;
  }
  else
  {
    value = i2;
  }
  return value;
}
//****************************************************************************80

double* MVN_Sampler::multinormal_sample ( int m, int n, double a[], double mu[], int *seed )

//****************************************************************************80
//
//  Purpose:
//
//    MULTINORMAL_SAMPLE samples a multivariate normal distribution.
//
//  Discussion:
//
//    The multivariate normal distribution for the M dimensional vector X
//    has the form:
//
//      pdf(X) = (2*pi*det(A))**(-M/2) * exp(-0.5*(X-MU)'*inverse(A)*(X-MU))
//
//    where MU is the mean vector, and A is a positive definite symmetric
//    matrix called the variance-covariance matrix.
//
//  Licensing:
//
//    This code is distributed under the GNU LGPL license. 
//
//  Modified:
//
//    09 December 2009
//
//  Author:
//
//    John Burkardt
//
//  Parameters:
//
//    Input, int M, the dimension of the space.
//
//    Input, int N, the number of points.
//
//    Input, double A[M*M], the variance-covariance 
//    matrix.  A must be positive definite symmetric.
//
//    Input, double MU[M], the mean vector.
//
//    Input/output, int *SEED, the random number seed.
//
//    Output, double MULTINORMAL_SAMPLE[M], the points.
//
{
  int i;
  int j;
  int k;
  double *r;
  double *x;
  double *y;
//
//  Compute the upper triangular Cholesky factor R of the variance-covariance
//  matrix.
//
  r = r8po_fa ( m, a );

  if ( !r )
  {
    cout << "\n";
    cout << "MULTINORMAL_SAMPLE - Fatal error!\n";
    cout << "  The variance-covariance matrix is not positive definite symmetric.\n";
    exit ( 1 );
  }
//
//  Y = MxN matrix of samples of the 1D normal distribution with mean 0
//  and variance 1.  
//
  y = r8vec_normal_01_new ( m*n, seed );
//
//  Compute X = MU + R' * Y.
//
  x = new double[m*n];

  for ( j = 0; j < n; j++ )
  {
    for ( i = 0; i < m; i++ )
    {
      x[i+j*m] = mu[i];
      for ( k = 0; k < m; k++ )
      {
        x[i+j*m] = x[i+j*m] + r[k+i*m] * y[k+j*m];
      }
    }
  }

  delete [] r;
  delete [] y;

  return x;
}
//****************************************************************************80

double MVN_Sampler::r8_uniform_01 ( int *seed )

//****************************************************************************80
//
//  Purpose:
//
//    R8_UNIFORM_01 returns a unit pseudorandom R8.
//
//  Discussion:
//
//    This routine implements the recursion
//
//      seed = ( 16807 * seed ) mod ( 2^31 - 1 )
//      u = seed / ( 2^31 - 1 )
//
//    The integer arithmetic never requires more than 32 bits,
//    including a sign bit.
//
//    If the initial seed is 12345, then the first three computations are
//
//      Input     Output      R8_UNIFORM_01
//      SEED      SEED
//
//         12345   207482415  0.096616
//     207482415  1790989824  0.833995
//    1790989824  2035175616  0.947702
//
//  Licensing:
//
//    This code is distributed under the GNU LGPL license. 
//
//  Modified:
//
//    11 August 2004
//
//  Author:
//
//    John Burkardt
//
//  Reference:
//
//    Paul Bratley, Bennett Fox, Linus Schrage,
//    A Guide to Simulation,
//    Second Edition,
//    Springer, 1987,
//    ISBN: 0387964673,
//    LC: QA76.9.C65.B73.
//
//    Bennett Fox,
//    Algorithm 647:
//    Implementation and Relative Efficiency of Quasirandom
//    Sequence Generators,
//    ACM Transactions on Mathematical Software,
//    Volume 12, Number 4, December 1986, pages 362-376.
//
//    Pierre L'Ecuyer,
//    Random Number Generation,
//    in Handbook of Simulation,
//    edited by Jerry Banks,
//    Wiley, 1998,
//    ISBN: 0471134031,
//    LC: T57.62.H37.
//
//    Peter Lewis, Allen Goodman, James Miller,
//    A Pseudo-Random Number Generator for the System/360,
//    IBM Systems Journal,
//    Volume 8, Number 2, 1969, pages 136-143.
//
//  Parameters:
//
//    Input/output, int *SEED, the "seed" value.  Normally, this
//    value should not be 0.  On output, SEED has been updated.
//
//    Output, double R8_UNIFORM_01, a new pseudorandom variate, 
//    strictly between 0 and 1.
//
{
  int i4_huge = 2147483647;
  int k;
  double r;

  if ( *seed == 0 )
  {
    cerr << "\n";
    cerr << "R8_UNIFORM_01 - Fatal error!\n";
    cerr << "  Input value of SEED = 0.\n";
    exit ( 1 );
  }

  k = *seed / 127773;

  *seed = 16807 * ( *seed - k * 127773 ) - k * 2836;

  if ( *seed < 0 )
  {
    *seed = *seed + i4_huge;
  }
//
//  Although SEED can be represented exactly as a 32 bit integer,
//  it generally cannot be represented exactly as a 32 bit real number.
//
  r = ( double ) ( *seed ) * 4.656612875E-10;

  return r;
}
//****************************************************************************80


double* MVN_Sampler::r8po_fa ( int n, double a[] )

//****************************************************************************80
//
//  Purpose:
//
//    R8PO_FA factors a R8PO matrix.
//
//  Discussion:
//
//    The R8PO storage format is appropriate for a symmetric positive definite 
//    matrix and its inverse.  (The Cholesky factor of a R8PO matrix is an
//    upper triangular matrix, so it will be in R8GE storage format.)
//
//    Only the diagonal and upper triangle of the square array are used.
//    This same storage format is used when the matrix is factored by
//    R8PO_FA, or inverted by R8PO_INVERSE.  For clarity, the lower triangle
//    is set to zero.
//
//    The positive definite symmetric matrix A has a Cholesky factorization
//    of the form:
//
//      A = R' * R
//
//    where R is an upper triangular matrix with positive elements on
//    its diagonal.  
//
//  Licensing:
//
//    This code is distributed under the GNU LGPL license. 
//
//  Modified:
//
//    04 February 2004
//
//  Author:
//
//    Original FORTRAN77 version by Dongarra, Bunch, Moler, Stewart.
//    C++ version by John Burkardt.
//
//  Reference:
//
//    Jack Dongarra, Jim Bunch, Cleve Moler, Pete Stewart,
//    LINPACK User's Guide,
//    SIAM, 1979,
//    ISBN13: 978-0-898711-72-1,
//    LC: QA214.L56.
//
//  Parameters:
//
//    Input, int N, the order of the matrix.
//
//    Input, double A[N*N], the matrix in R8PO storage.
//
//    Output, double R8PO_FA[N*N], the Cholesky factor in SGE
//    storage, or NULL if there was an error.
//
{
  double *b;
  int i;
  int j;
  int k;
  double s;

  b = new double[n*n];

  for ( j = 0; j < n; j++ )
  {
    for ( i = 0; i < n; i++ )
    {
      b[i+j*n] = a[i+j*n];
    }
  }

  for ( j = 0; j < n; j++ )
  {
    for ( k = 0; k <= j-1; k++ )
    {
      for ( i = 0; i <= k-1; i++ )
      {
        b[k+j*n] = b[k+j*n] - b[i+k*n] * b[i+j*n];
      }
      b[k+j*n] = b[k+j*n] / b[k+k*n];
    }

    s = b[j+j*n];
    for ( i = 0; i <= j-1; i++ )
    {
      s = s - b[i+j*n] * b[i+j*n];
    }

    if ( s <= 0.0 )
    {
      delete [] b;
      return NULL;
    }

    b[j+j*n] = sqrt ( s );
  }
//
//  Since the Cholesky factor is in R8GE format, zero out the lower triangle.
//
  for ( i = 0; i < n; i++ )
  {
    for ( j = 0; j < i; j++ )
    {
      b[i+j*n] = 0.0;
    }
  }

  return b;
}
//****************************************************************************80

double* MVN_Sampler::r8vec_normal_01_new ( int n, int *seed )

//****************************************************************************80
//
//  Purpose:
//
//    R8VEC_NORMAL_01_NEW returns a unit pseudonormal R8VEC.
//
//  Discussion:
//
//    The standard normal probability distribution function (PDF) has
//    mean 0 and standard deviation 1.
//
//    This routine can generate a vector of values on one call.  It
//    has the feature that it should provide the same results
//    in the same order no matter how we break up the task.
//
//    Before calling this routine, the user may call RANDOM_SEED
//    in order to set the seed of the random number generator.
//
//    The Box-Muller method is used, which is efficient, but
//    generates an even number of values each time.  On any call
//    to this routine, an even number of new values are generated.
//    Depending on the situation, one value may be left over.
//    In that case, it is saved for the next call.
//
//  Licensing:
//
//    This code is distributed under the GNU LGPL license. 
//
//  Modified:
//
//    18 October 2004
//
//  Author:
//
//    John Burkardt
//
//  Parameters:
//
//    Input, int N, the number of values desired.  If N is negative,
//    then the code will flush its internal memory; in particular,
//    if there is a saved value to be used on the next call, it is
//    instead discarded.  This is useful if the user has reset the
//    random number seed, for instance.
//
//    Input/output, int *SEED, a seed for the random number generator.
//
//    Output, double R8VEC_NORMAL_01_NEW[N], a sample of the standard normal PDF.
//
//  Local parameters:
//
//    Local, int MADE, records the number of values that have
//    been computed.  On input with negative N, this value overwrites
//    the return value of N, so the user can get an accounting of
//    how much work has been done.
//
//    Local, real R(N+1), is used to store some uniform random values.
//    Its dimension is N+1, but really it is only needed to be the
//    smallest even number greater than or equal to N.
//
//    Local, int SAVED, is 0 or 1 depending on whether there is a
//    single saved value left over from the previous call.
//
//    Local, int X_LO, X_HI, records the range of entries of
//    X that we need to compute.  This starts off as 1:N, but is adjusted
//    if we have a saved value that can be immediately stored in X(1),
//    and so on.
//
//    Local, real Y, the value saved from the previous call, if
//    SAVED is 1.
//
{
# define PI 3.141592653589793

  int i;
  int m;
  static int made = 0;
  double *r;
  static int saved = 0;
  double *x;
  int x_hi;
  int x_lo;
  static double y = 0.0;

  x = new double[n];
//
//  I'd like to allow the user to reset the internal data.
//  But this won't work properly if we have a saved value Y.
//  I'm making a crock option that allows the user to signal
//  explicitly that any internal memory should be flushed,
//  by passing in a negative value for N.
//
  if ( n < 0 )
  {
    made = 0;
    saved = 0;
    y = 0.0;
    return NULL;
  }
  else if ( n == 0 )
  {
    return NULL;
  }
//
//  Record the range of X we need to fill in.
//
  x_lo = 1;
  x_hi = n;
//
//  Use up the old value, if we have it.
//
  if ( saved == 1 )
  {
    x[0] = y;
    saved = 0;
    x_lo = 2;
  }
//
//  Maybe we don't need any more values.
//
  if ( x_hi - x_lo + 1 == 0 )
  {
  }
//
//  If we need just one new value, do that here to avoid null arrays.
//
  else if ( x_hi - x_lo + 1 == 1 )
  {
    r = r8vec_uniform_01_new ( 2, seed );

    x[x_hi-1] = sqrt ( - 2.0 * log ( r[0] ) ) * cos ( 2.0 * PI * r[1] );
    y =         sqrt ( - 2.0 * log ( r[0] ) ) * sin ( 2.0 * PI * r[1] );

    saved = 1;

    made = made + 2;

    delete [] r;
  }
//
//  If we require an even number of values, that's easy.
//
  else if ( ( x_hi - x_lo + 1 ) % 2 == 0 )
  {
    m = ( x_hi - x_lo + 1 ) / 2;

    r = r8vec_uniform_01_new ( 2*m, seed );

    for ( i = 0; i <= 2*m-2; i = i + 2 )
    {
      x[x_lo+i-1] = sqrt ( - 2.0 * log ( r[i] ) ) * cos ( 2.0 * PI * r[i+1] );
      x[x_lo+i  ] = sqrt ( - 2.0 * log ( r[i] ) ) * sin ( 2.0 * PI * r[i+1] );
    }
    made = made + x_hi - x_lo + 1;

    delete [] r;
  }
//
//  If we require an odd number of values, we generate an even number,
//  and handle the last pair specially, storing one in X(N), and
//  saving the other for later.
//
  else
  {
    x_hi = x_hi - 1;

    m = ( x_hi - x_lo + 1 ) / 2 + 1;

    r = r8vec_uniform_01_new ( 2*m, seed );

    for ( i = 0; i <= 2*m-4; i = i + 2 )
    {
      x[x_lo+i-1] = sqrt ( - 2.0 * log ( r[i] ) ) * cos ( 2.0 * PI * r[i+1] );
      x[x_lo+i  ] = sqrt ( - 2.0 * log ( r[i] ) ) * sin ( 2.0 * PI * r[i+1] );
    }

    i = 2*m - 2;

    x[x_lo+i-1] = sqrt ( - 2.0 * log ( r[i] ) ) * cos ( 2.0 * PI * r[i+1] );
    y           = sqrt ( - 2.0 * log ( r[i] ) ) * sin ( 2.0 * PI * r[i+1] );

    saved = 1;

    made = made + x_hi - x_lo + 2;

    delete [] r;
  }

  return x;
# undef PI
}
//****************************************************************************80

//****************************************************************************80

double* MVN_Sampler::r8vec_uniform_01_new ( int n, int *seed )

//****************************************************************************80
//
//  Purpose:
//
//    R8VEC_UNIFORM_01_NEW returns a new unit pseudorandom R8VEC.
//
//  Discussion:
//
//    This routine implements the recursion
//
//      seed = ( 16807 * seed ) mod ( 2^31 - 1 )
//      u = seed / ( 2^31 - 1 )
//
//    The integer arithmetic never requires more than 32 bits,
//    including a sign bit.
//
//  Licensing:
//
//    This code is distributed under the GNU LGPL license. 
//
//  Modified:
//
//    19 August 2004
//
//  Author:
//
//    John Burkardt
//
//  Reference:
//
//    Paul Bratley, Bennett Fox, Linus Schrage,
//    A Guide to Simulation,
//    Second Edition,
//    Springer, 1987,
//    ISBN: 0387964673,
//    LC: QA76.9.C65.B73.
//
//    Bennett Fox,
//    Algorithm 647:
//    Implementation and Relative Efficiency of Quasirandom
//    Sequence Generators,
//    ACM Transactions on Mathematical Software,
//    Volume 12, Number 4, December 1986, pages 362-376.
//
//    Pierre L'Ecuyer,
//    Random Number Generation,
//    in Handbook of Simulation,
//    edited by Jerry Banks,
//    Wiley, 1998,
//    ISBN: 0471134031,
//    LC: T57.62.H37.
//
//    Peter Lewis, Allen Goodman, James Miller,
//    A Pseudo-Random Number Generator for the System/360,
//    IBM Systems Journal,
//    Volume 8, Number 2, 1969, pages 136-143.
//
//  Parameters:
//
//    Input, int N, the number of entries in the vector.
//
//    Input/output, int *SEED, a seed for the random number generator.
//
//    Output, double R8VEC_UNIFORM_01_NEW[N], the vector of pseudorandom values.
//
{
  int i;
  int i4_huge = 2147483647;
  int k;
  double *r;

  if ( *seed == 0 )
  {
    cerr << "\n";
    cerr << "R8VEC_UNIFORM_01_NEW - Fatal error!\n";
    cerr << "  Input value of SEED = 0.\n";
    exit ( 1 );
  }

  r = new double[n];

  for ( i = 0; i < n; i++ )
  {
    k = *seed / 127773;

    *seed = 16807 * ( *seed - k * 127773 ) - k * 2836;

    if ( *seed < 0 )
    {
      *seed = *seed + i4_huge;
    }

    r[i] = ( double ) ( *seed ) * 4.656612875E-10;
  }

  return r;
}
